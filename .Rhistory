geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "yellow", "Grüne" = "forestgreen", "SPD" = "red"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
theme(legend.title = element_blank())
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(
title = waiver(),
subtitle = waiver(),
caption = waiver(),
tag = waiver()
)
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
theme(legend.title = element_blank()) +
labs(
color = "",
x = "test",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = waiver(),
tag = waiver(),
)
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
theme(legend.title = element_blank()) +
labs(    color = "",
x = "test",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = waiver(),
tag = waiver()
)
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "test",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = waiver(),
tag = waiver()
)
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = waiver(),
tag = waiver()
)
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = waiver(),
tag = waiver()
) +
theme(text=element_text(size=16,  family="serif"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = waiver(),
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
caption = waiver(),
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
caption = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
library(ggalt)
parteienfilter <- c("spd", "grune", "cdu", "fdp", "af_d", "die_linke")
df_temp <- df_wahlen %>%
filter(partei %in% parteienfilter) %>%
filter(bezirksname == "Pankow") %>%
group_by(jahr, partei, wahl) %>%
summarise(mean = mean(stimmanteil)) %>%
ungroup() %>%
group_by(jahr, partei) %>%
summarise(mean = mean(mean)) %>%
mutate(partei = factor(partei, levels = c("af_d", "cdu", "die_linke", "fdp", "grune", "spd"), labels = c("AFD", "CDU", "Linkspartei", "FDP", "Grüne", "SPD")))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Trend der Berliner Wahlergebnisse",
subtitle = waiver(),
caption = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
library(ggalt)
parteienfilter <- c("spd", "grune", "cdu", "fdp", "af_d", "die_linke")
df_temp <- df_wahlen %>%
filter(partei %in% parteienfilter) %>%
filter(bezirksname == "Pankow") %>%
group_by(jahr, partei, wahl) %>%
summarise(mean = mean(stimmanteil)) %>%
ungroup() %>%
group_by(jahr, partei) %>%
summarise(mean = mean(mean)) %>%
mutate(partei = factor(partei, levels = c("af_d", "cdu", "die_linke", "fdp", "grune", "spd"), labels = c("AFD", "CDU", "Linkspartei", "FDP", "Grüne", "SPD")))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
# theme(legend.title = element_blank()) +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Entwicklung Pankow 2009 bis 2019",
subtitle = waiver(),
caption = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
ggplot(df_temp) +
geom_point(aes(x=jahr, y=mean, color = partei)) +
geom_xspline(aes(x = jahr, y = mean, color = partei), size = 0.8, spline_shape = -.25) +
theme_classic() +
scale_color_manual(values = c("AFD" = "deepskyblue", "CDU" = "black", "Linkspartei" = "hotpink1", "FDP" = "gold", "Grüne" = "forestgreen", "SPD" = "red")) +
theme(legend.position = "bottom") +
labs(    color = "",
x = "",
y = "Stimmanteil in %",
title = "Entwicklung Pankow 2009 bis 2019",
subtitle = waiver(),
caption = "Stimmanteile von gleichzeitigen Wahlen wurden gemittelt",
tag = waiver()
) +
theme(text=element_text(size=16,  family="sans"))
df <- readRDS(file=here("data/df.rds"))
library(here)
df <- readRDS(file=here("data/df.rds"))
###################################################################################################
df_wahlen_2016_AGH <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EE_WB_AH2016.xlsx", wahlart = "AGH", datenname = "df_wahlen_2016_AGH", lazy = dontforcereload)
df_wahlen_2011_AGH <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_AB2011.xlsx", wahlart = "AGH", datenname = "df_wahlen_2011_AGH", lazy = dontforcereload)
df_wahlen_2019_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2019.xlsx", wahlart = "EU", datenname = "df_wahlen_2019_EU", lazy = dontforcereload)
df_wahlen_2014_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2014.xlsx", wahlart = "EU", datenname = "df_wahlen_2014_EU", lazy = dontforcereload)
df_wahlen_2009_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2009.xlsx", wahlart = "EU", datenname = "df_wahlen_2009_EU", lazy = dontforcereload)
df_wahlen_2017_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EE_WB_BU2017.xlsx", wahlart = "BU", datenname = "df_wahlen_2017_BU", lazy = dontforcereload)
df_wahlen_2013_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_BU2013.xlsx", wahlart = "BU", datenname = "df_wahlen_2013_BU", lazy = dontforcereload)
df_wahlen_2009_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_BU2009.xlsx", wahlart = "BU", datenname = "df_wahlen_2009_BU", lazy = dontforcereload)
dontforcereload = TRUE
suppressPackageStartupMessages(library(tidyverse)) # Tidying data
suppressPackageStartupMessages(library(readxl)) # Reading excelfiles
suppressPackageStartupMessages(library(sf)) # Reading Shapefiles
suppressPackageStartupMessages(library(areal)) # Mix incongruent data
suppressPackageStartupMessages(library(here)) # Find correct place to load
source(here("R/functions.R")) # Specialized functions
df_wahlen_2016_AGH <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EE_WB_AH2016.xlsx", wahlart = "AGH", datenname = "df_wahlen_2016_AGH", lazy = dontforcereload)
df_wahlen_2011_AGH <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_AB2011.xlsx", wahlart = "AGH", datenname = "df_wahlen_2011_AGH", lazy = dontforcereload)
df_wahlen_2019_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2019.xlsx", wahlart = "EU", datenname = "df_wahlen_2019_EU", lazy = dontforcereload)
df_wahlen_2014_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2014.xlsx", wahlart = "EU", datenname = "df_wahlen_2014_EU", lazy = dontforcereload)
df_wahlen_2009_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2009.xlsx", wahlart = "EU", datenname = "df_wahlen_2009_EU", lazy = dontforcereload)
df_wahlen_2017_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EE_WB_BU2017.xlsx", wahlart = "BU", datenname = "df_wahlen_2017_BU", lazy = dontforcereload)
df_wahlen_2013_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_BU2013.xlsx", wahlart = "BU", datenname = "df_wahlen_2013_BU", lazy = dontforcereload)
df_wahlen_2009_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_BU2009.xlsx", wahlart = "BU", datenname = "df_wahlen_2009_BU", lazy = dontforcereload)
# Prepare Wahl
df_wahlen <- rbind(df_wahlen_2011_AGH,
df_wahlen_2016_AGH,
df_wahlen_2009_BU,
df_wahlen_2009_EU,
df_wahlen_2014_EU,
df_wahlen_2017_BU,
df_wahlen_2019_EU,
df_wahlen_2013_BU) %>%
mutate(wahlbezirk = paste0(bezirksnummer, wahlbezirk)) %>%
mutate(stimmanteil = round(100*stimmen/gultige_stimmen,1)) %>%
filter(str_detect(wahlbezirksart, "^B", negate = TRUE))
saveRDS(df_wahlen, file=here("data/df_wahlen.rds"))
df_wahlen %>%
filter(Parteien == "grune") %>%
filter(stimmart == "BVV") %>% # Hier erfolgt die Filterung nach der Wahlart
filter(year > as.Date("01-01-2015", format="%d-%m-%Y")) %>%
filter(wahlbezirksart == "Urnenwahlbezirk") %>%
mutate(wb = paste0(bezirksnummer, wahlbezirk)) %>%
group_by(wb) %>%
summarise(wahlergebnis = 100*sum(Stimmen)/sum(gultige_stimmen), .groups = 'drop') %>%
left_join(df_geo, by = "wb") ->
df
knitr::opts_chunk$set(echo = FALSE,
collapse = TRUE,
message = FALSE,
warning = FALSE,
out.width = "100%")
suppressPackageStartupMessages(library(tidyverse)) # Tidying data
suppressPackageStartupMessages(library(sf)) # Reading Shapefiles
suppressPackageStartupMessages(library(here)) # Find correct place to load
suppressPackageStartupMessages(library(tmap)) # Find correct place to load
df <- readRDS(file=here("data/df_grune_pankow.rds")) %>% rename("Stimmanteil in %" = stimmanteil)
View(df)
# Wohnlage
df_wohnlage <- read_opendataberlin(quelle = "https://www.statistik-berlin-brandenburg.de/opendata/WHNLAGE2019_Matrix.csv", datenname = "df_wohnlage")
###################################################################################################
dontforcereload = TRUE
suppressPackageStartupMessages(library(tidyverse)) # Tidying data
suppressPackageStartupMessages(library(readxl)) # Reading excelfiles
suppressPackageStartupMessages(library(sf)) # Reading Shapefiles
suppressPackageStartupMessages(library(areal)) # Mix incongruent data
suppressPackageStartupMessages(library(here)) # Find correct place to load
source(here("R/functions.R")) # Specialized functions
# Wohnlage
df_wohnlage <- read_opendataberlin(quelle = "https://www.statistik-berlin-brandenburg.de/opendata/WHNLAGE2019_Matrix.csv", datenname = "df_wohnlage")
df_wohnlage
###################################################################################################
###################################################################################################
# Diese Datei lädt die Daten, die für die Wahlanalyse nötig sind
# Dabei wird als erstes abgefagt, ob die Datendatei schon vorhanden ist, ansonsten wird das
# gesamte Skript durchlaufen.
###################################################################################################
###################################################################################################
dontforcereload = TRUE
suppressPackageStartupMessages(library(tidyverse)) # Tidying data
suppressPackageStartupMessages(library(readxl)) # Reading excelfiles
suppressPackageStartupMessages(library(sf)) # Reading Shapefiles
suppressPackageStartupMessages(library(areal)) # Mix incongruent data
suppressPackageStartupMessages(library(here)) # Find correct place to load
source(here("R/functions.R")) # Specialized functions
###################################################################################################
# Daten von Wahlen-Berlin.de
###################################################################################################
df_wahlen_2016_AGH <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EE_WB_AH2016.xlsx", wahlart = "AGH", datenname = "df_wahlen_2016_AGH", lazy = dontforcereload)
df_wahlen_2011_AGH <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_AB2011.xlsx", wahlart = "AGH", datenname = "df_wahlen_2011_AGH", lazy = dontforcereload)
df_wahlen_2019_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2019.xlsx", wahlart = "EU", datenname = "df_wahlen_2019_EU", lazy = dontforcereload)
df_wahlen_2014_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2014.xlsx", wahlart = "EU", datenname = "df_wahlen_2014_EU", lazy = dontforcereload)
df_wahlen_2009_EU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EU2009.xlsx", wahlart = "EU", datenname = "df_wahlen_2009_EU", lazy = dontforcereload)
df_wahlen_2017_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_EE_WB_BU2017.xlsx", wahlart = "BU", datenname = "df_wahlen_2017_BU", lazy = dontforcereload)
df_wahlen_2013_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_BU2013.xlsx", wahlart = "BU", datenname = "df_wahlen_2013_BU", lazy = dontforcereload)
df_wahlen_2009_BU <- read_wahlenberlin(quelle = "https://www.statistik-berlin-brandenburg.de/publikationen/Dowmies/DL_BE_BU2009.xlsx", wahlart = "BU", datenname = "df_wahlen_2009_BU", lazy = dontforcereload)
###################################################################################################
# Open Data Berlin
###################################################################################################
# Wahlbezirke
# https://daten.berlin.de/datensaetze/geometrien-der-wahlbezirke-f%C3%BCr-die-wahl-zum-abgeordnetenhaus-von-berlin-und-zu-den
df_wahlbezirke <- read_opendataberlin(quelle = "https://www.statistik-berlin-brandenburg.de/opendata/RBS_OD_UWB_AGH_09_2016.zip", datenname = "df_wahlbezirke", zieldatei = "UWB.shp")
# Wohndauer
# https://daten.berlin.de/datensaetze/einwohnerinnen-und-einwohner-berlin-lor-planungsr%C3%A4umen-nach-wohndauer-am-31122019
df_wohndauer <- read_opendataberlin(quelle = "https://www.statistik-berlin-brandenburg.de/opendata/WHNDAUER2019_Matrix.csv", datenname = "df_wohndauer")
# LOR
# https://daten.berlin.de/datensaetze/lebensweltlich-orientierte-r%C3%A4ume-lor-berlin
df_lor <- read_opendataberlin(quelle = "http://www.stadtentwicklung.berlin.de/planen/basisdaten_stadtentwicklung/lor/download/LOR_SHP_EPSG_25833.zip", datenname = "df_lor", zieldatei = "Planungsraum_EPSG_25833.shp")
# Demographie
df_demographie <- read_opendataberlin(quelle = "https://www.statistik-berlin-brandenburg.de/opendata/EWR201812E_Matrix.csv", datenname = "df_demographie")
# Wohnlage
df_wohnlage <- read_opendataberlin(quelle = "https://www.statistik-berlin-brandenburg.de/opendata/WHNLAGE2019_Matrix.csv", datenname = "df_wohnlage")
###################################################################################################
# Umwandlung von Datensätzen
###################################################################################################
df_demographie <- df_demographie %>%
select(-c(E_E,E_EM,E_EW, BEZ, PGR, BZR, PLR, STADTRAUM, ZEIT, E_EU1, E_E1U6, E_E6U15, E_E15U18, E_E18U25, E_E25U55, E_E55U65, E_E65U80, E_E80U110 )) %>%
pivot_longer(cols = starts_with("E_")) %>%
separate(name, c(NA, NA, "number"), sep = "E") %>%
separate(number, c("min", "max")) %>%
mutate(max = as.numeric(max)) %>%
mutate(min = as.numeric(min)) %>%
mutate(alter = (min + max)/2) %>%
mutate(gewicht = alter * value) %>%
group_by(RAUMID) %>%
summarise(Altersmittelwert = sum(gewicht)/sum(value))
df_lor <- df_lor %>%
st_set_crs(., 25833) %>%
rename(RAUMID = SCHLUESSEL)
###################################################################################################
# Datensätze zusammenfügen
###################################################################################################
# Prepare Wahlbezirke
df_wahlbezirke <- df_wahlbezirke %>%
mutate(wahlbezirk = paste0(BEZ, UWB))
# Prepare Wahl
df_wahlen <- rbind(df_wahlen_2011_AGH,
df_wahlen_2016_AGH,
df_wahlen_2009_BU,
df_wahlen_2009_EU,
df_wahlen_2014_EU,
df_wahlen_2017_BU,
df_wahlen_2019_EU,
df_wahlen_2013_BU) %>%
mutate(wahlbezirk = paste0(bezirksnummer, wahlbezirk)) %>%
mutate(stimmanteil = round(100*stimmen/gultige_stimmen,1)) %>%
filter(str_detect(wahlbezirksart, "^B", negate = TRUE))
# Prepare LOR
df_lor <- df_lor %>%
left_join(df_wohndauer, by = "RAUMID") %>%
left_join(df_demographie, by = "RAUMID")
# Combine Wahlbezirke + LOR
df_wahlbezirke_lor <- aw_interpolate(df_wahlbezirke, tid = wahlbezirk, source = df_lor, sid = RAUMID, weight = "sum", output = "sf", extensive = c("Altersmittelwert", "PDAU10"))
# Combine Wahlbezirke_LOR + Wahlen
df <- df_wahlbezirke_lor %>% full_join(df_wahlen, by = "wahlbezirk")
# Save reduced datasets
df_grune_pankow <- df %>% filter(partei == "grune") %>% filter(bezirksname == "Pankow")
saveRDS(df_wahlen, file=here("data/df_wahlen.rds"))
# Save into data
saveRDS(df, file=here("data/df.rds"))
# df <- readRDS(file=here("data/df.rds"))
saveRDS(df_grune_pankow, file=here("data/df_grune_pankow.rds"))
unique(df$wahl)
df_bu <- df %>% filter(wahl = "BU2_2017")
df_bu <- df %>% filter(wahl == "BU2_2017")
saveRDS(df_bu, file=here("data/df_bu.rds"))
df <- df_bu <- readRDS(file=here("data/df_bu.rds")) %>% rename("Stimmanteil in %" = stimmanteil)  %>% filter(Parteien == "grune")
df <- df_bu %>% rename("Stimmanteil in %" = stimmanteil)  %>% filter(Parteien == "grune")
df <- df_bu %>% rename("Stimmanteil in %" = stimmanteil)  %>% filter(partei == "grune")
korrelationskoeffizent = df %>% summarize(correlation = cor(wahlergebnis, Altersmittelwert)) %>% pull() %>% round(digits = 2)
korrelationskoeffizent = df %>% summarize(correlation = cor(wahlergebnis, altersmittelwert)) %>% pull() %>% round(digits = 2)
df <- df_bu %>% rename("Stimmanteil in %" = stimmanteil)  %>% filter(partei == "grune")
df %>% summarize(correlation = cor(wahlergebnis, Altersmittelwert))
korrelationskoeffizent = df %>% summarize(correlation = cor("Stimmanteil in %", Altersmittelwert)) %>% pull() %>% round(digits = 2)
df %>% summarize(correlation = cor(stimmanteil, Altersmittelwert))
df_bu <- readRDS(file=here("data/df_bu.rds"))
df <- df_bu %>% rename("Stimmanteil in %" = stimmanteil)  %>% filter(partei == "grune")
df_bu <- readRDS(file=here("data/df_bu.rds"))
korrelationskoeffizent = df_bu %>% summarize(correlation = cor(stimmanteil, Altersmittelwert)) %>% pull() %>% round(digits = 2)
df_bu %>% summarize(correlation = cor(stimmanteil, Altersmittelwert))
ggplot(df, aes(x = Altersmittelwert, y = stimmanteil)) +
geom_jitter(aes(color = stimmanteil)) +
scale_color_continuous(low = "lightgreen",  high = "darkgreen")
ggplot(df_bu, aes(x = Altersmittelwert, y = stimmanteil)) +
geom_jitter(aes(color = stimmanteil)) +
scale_color_continuous(low = "lightgreen",  high = "darkgreen") +
labs(x = "Altersmittelwert der Wahlbezirke", y = "Wahlergebnis Grüne BVV 2016 in %", title = "Wahlergebnisse der Berliner Grünen zur BVV-Wahl 2016 \n nach Altersmittelwert pro Wahlbezirk (ohne Briefwahl)") +
geom_smooth(method = "lm", se = TRUE) +
theme_classic() +
theme(legend.position = "none")
df_bu <- readRDS(file=here("data/df_bu.rds"))
ggplot(df_bu, aes(x = Altersmittelwert, y = stimmanteil)) +
geom_jitter(aes(color = stimmanteil)) +
scale_color_continuous(low = "lightgreen",  high = "darkgreen") +
labs(x = "Altersmittelwert der Wahlbezirke", y = "Wahlergebnis Grüne BVV 2016 in %", title = "Wahlergebnisse der Berliner Grünen zur BVV-Wahl 2016 \n nach Altersmittelwert pro Wahlbezirk (ohne Briefwahl)") +
geom_smooth(method = "lm", se = TRUE) +
theme_classic() +
theme(legend.position = "none")
df_bu <- readRDS(file=here("data/df_bu.rds")) %>% filter(partei == "grune")
ggplot(df_bu, aes(x = Altersmittelwert, y = stimmanteil)) +
geom_jitter(aes(color = stimmanteil)) +
scale_color_continuous(low = "lightgreen",  high = "darkgreen") +
labs(x = "Altersmittelwert der Wahlbezirke", y = "Wahlergebnis Grüne BVV 2016 in %", title = "Wahlergebnisse der Berliner Grünen zur BVV-Wahl 2016 \n nach Altersmittelwert pro Wahlbezirk (ohne Briefwahl)") +
geom_smooth(method = "lm", se = TRUE) +
theme_classic() +
theme(legend.position = "none")
korrelationskoeffizent = df_bu %>% summarize(correlation = cor(stimmanteil, Altersmittelwert)) %>% pull() %>% round(digits = 2)
df_bu %>% summarize(correlation = cor(stimmanteil, Altersmittelwert)) %>% pull()
+ annotate("text", x = 55, y = 40, label = paste("Korrelations-Koeff:", korrelationskoeffizent))
ggplot(df_bu, aes(x = Altersmittelwert, y = stimmanteil)) +
geom_jitter(aes(color = stimmanteil)) +
scale_color_continuous(low = "lightgreen",  high = "darkgreen") +
labs(x = "Altersmittelwert der Wahlbezirke", y = "Wahlergebnis Grüne BVV 2016 in %", title = "Wahlergebnisse der Berliner Grünen zur BVV-Wahl 2016 \n nach Altersmittelwert pro Wahlbezirk (ohne Briefwahl)") +
geom_smooth(method = "lm", se = TRUE) +
theme_classic() +
theme(legend.position = "none")
+ annotate("text", x = 55, y = 40, label = paste("Korrelations-Koeff:", korrelationskoeffizent))
tm_shape(df_bu) %>% tm_fill("Altersmittelwert")
tm_shape(df_bu)
tm_shape(df_bu) %>%
tm_borders()
tm_shape(df_bu) %>%
tm_borders()
tm_shape(df_bu) +
tm_borders()
tm_shape(df_bu) +
tm_borders() +
tm_fill("Altersmittelwert")
readRDS(here("data/df_grune_pankow.rds"))
library(here)
library(tidyverse)
readRDS(here("data/df_grune_pankow.rds"))
df <- readRDS(here("data/df_grune_pankow.rds"))
df
View(df)
df %>%
group_by(wahl) %>%
summarise(mean(stimmanteil))
df %>%
drop_geometry() %>%
group_by(wahl)
library(sf)
df %>%
drop_geometry() %>%
group_by(wahl) %>%
summarise(mean(stimmanteil))
df %>%
st_drop_geometry() %>%
group_by(wahl) %>%
summarise(mean(stimmanteil))
df %>%
st_drop_geometry() %>%
pivot_wider(stimmanteil)
df %>%
st_drop_geometry() %>%
select(wahlbezirk, stimmanteil, wahl)
df %>%
st_drop_geometry() %>%
select(wahlbezirk, stimmanteil, wahl) %>%
pivot_wider(values_from = stimmanteil, names_from = wahl)
df %>%
st_drop_geometry() %>%
select(wahlbezirk, stimmanteil, wahl) %>%
group_by(wahlbezirk) %>%
summarise(sd(stimmanteil))
df %>%
select(wahlbezirk, stimmanteil, wahl) %>%
group_by(wahlbezirk) %>%
summarise(sd(stimmanteil))
pivot_wider(values_from = stimmanteil, names_from = wahl)
group_by(wahlbezirk) %>%
summarise(mean(stimmanteil))
df %>%
select(wahlbezirk, stimmanteil, wahl) %>%
group_by(wahlbezirk) %>%
summarise(sd(stimmanteil))
df_temp <- df %>%
select(wahlbezirk, stimmanteil, wahl) %>%
group_by(wahlbezirk) %>%
summarise(standardabweichung = sd(stimmanteil))
tm_shape(df_temp) +
tm_fill("standardabweichung")
library(tmap)
tm_shape(df_temp) +
tm_fill("standardabweichung")
tm_shape(df_temp) +
tm_fill("standardabweichung")
